/*******************************************************************************
 * Copyright 2019 metaphore
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

subprojects {
    apply plugin: "java-library"
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    compileJava.options.incremental = true

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    ext {
        projectVersion = '0.5.4'
        isSnapshot = true
    }

    group = "com.crashinvaders.vfx"
    version = "$projectVersion${isSnapshot ? '-SNAPSHOT' : ''}"

    jar {
        from project.sourceSets.main.output
        from(project.sourceSets.main.allSource) {
            include '**/*.xml'
        }
        archiveBaseName = project.artifactName
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }

    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        repositories {
            maven {
                def urlRelease = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def urlSnapshot = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = isSnapshot ? urlSnapshot : urlRelease
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {

                artifactId = project.artifactName
                from components.java

                pom {
                    name = project.artifactName
                    description = project.description
                    url = POM_URL
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEV0_ID
                            name = POM_DEV0_NAME
                            email = POM_DEV0_EMAIL
                        }
                    }
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    // Simply using "required" in signing block doesn't work because taskGraph isn't ready yet.
    gradle.taskGraph.whenReady {
        tasks.withType(Sign) {
            onlyIf { !isSnapshot }
        }
    }

    // Invokes publish task if the version is a snapshot.
    task publishSnapshot() {
        if (!isSnapshot) {
            return
        }
        dependsOn project.assemble
        dependsOn project.publish
    }

    // Invokes uploadArchives task if the version is a snapshot.
    task uploadSnapshotArchives() {
        if (!isSnapshot) {
            println 'Not a snapshot version.'
            return;
        }
        dependsOn 'build'
        dependsOn 'uploadArchives'
    }
}

task publishAll {
    group 'GDX VFX'
    description 'Publish all the Maven artifacts to the public repos.'

    subprojects.forEach {project ->
        dependsOn project.build
        dependsOn project.publish
    }

//    dependsOn rootProject.closeAndReleaseRepository
}

task publishAllSnapshots {
    group 'GDX VFX'
    description 'Publish all the Maven artifacts to the public repos.' +
            'This task will only be execute if the current version is a snapshot.'

    subprojects.forEach {project ->
        dependsOn project.build
        dependsOn project.publishSnapshot
    }
}

task installAll {
    group 'GDX VFX'
    description 'Installes all the Maven artifacts to the local Maven repo.'

    subprojects.forEach {project ->
        dependsOn project.build
        dependsOn project.publishToMavenLocal
    }
}

/** Checks if the property exists. If it doesn't - try to resolve it from the environment variable. */
void resolveProperty(String propertyName, String envVariableName) {
    if (!project.hasProperty(propertyName)) {
        project.ext.propertyName = System.getenv(envVariableName)
        if (!project.ext.propertyName) {
            println "$propertyName is not defined"
        } else {
            println "$propertyName has been set from an environment variable."
        }
    }
}
// Setup Nexus repo and GitHub package repo credentials.
// They usually defined in user global gradle.properties file
// or as environment variables (Travis-CI).
resolveProperty('ossrhUsername', 'OSSRH_USERNAME')
resolveProperty('ossrhPassword', 'OSSRH_PASSWORD')