/*******************************************************************************
 * Copyright 2019 metaphore
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

apply plugin: 'java'
apply plugin: "gwt"
apply plugin: "war"

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs += ['../assets']

gwt {
    gwtVersion = gwtLibVersion
    maxHeapSize = "1G"          // Default 256m is not enough for gwt compiler. GWT is HUNGRY
    minHeapSize = "1G"

    src = files(file("src/")) // Needs to be in front of "modules" below.
    modules 'com.crashinvaders.vfx.demo.GdxDefinition'
    devModules 'com.crashinvaders.vfx.demo.GdxDefinitionSuperdev'
    project.webAppDirName = 'webapp'

    compiler.strict = true
    compiler.disableCastChecking = true

    logLevel = 'INFO'
}

dependencies {
    implementation project(":demo:core")
    implementation project(":gdx-vfx:gwt")
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
    implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
    implementation "com.crashinvaders.lml:gdx-lml:$lmlVersion:sources"
    implementation "com.crashinvaders.lml:gdx-kiwi:$lmlVersion:sources"
}

def HttpFileServer server = null
def httpFilePort = 8080
task startHttpServer() {
    dependsOn draftCompileGwt
    String output = project.buildDir.path + "/gwt/draftOut"
    doLast {
        copy {
            from "webapp"
            into output
        }
        copy {
            from "war"
            into output
        }
        server = new SimpleHttpFileServerFactory().start(new File(output), httpFilePort)
        println "Server started in directory ${server.getContentRoot()}, http://localhost:${server.getPort()}/index.html"
    }
}

task superDev(type: org.wisepersist.gradle.plugins.gwt.GwtSuperDev) {
    dependsOn startHttpServer
    doFirst {
        gwt.modules = gwt.devModules
    }
}

task dist(dependsOn: [clean, compileGwt]) {
    doLast {
        file("build/dist").mkdirs()
        copy {
            from "build/gwt/out"
            into "build/dist"
        }
        copy {
            from "webapp"
            into "build/dist"
            }
        copy {
            from "war"
            into "build/dist"
        }
    }
}

task addSource {
    doLast {
        sourceSets.main.compileClasspath += files(project(':gdx-vfx:core').sourceSets.main.allJava.srcDirs)
        sourceSets.main.compileClasspath += files(project(':gdx-vfx:effects').sourceSets.main.allJava.srcDirs)
        sourceSets.main.compileClasspath += files(project(':gdx-vfx:gwt').sourceSets.main.allJava.srcDirs)
        sourceSets.main.compileClasspath += files(project(':demo:core').sourceSets.main.allJava.srcDirs)
    }
}
tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)